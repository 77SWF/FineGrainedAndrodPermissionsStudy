<table class="responsive">
    <tbody><tr><th colspan="2">Parameters</th></tr>
      <tr>
        <td><code dir="ltr" translate="no">dataMimeType</code></td>
        <td width="100%">
          <code dir="ltr" translate="no">String</code>: The MIME type of the content. See
 <a href="/notifications/messaging"> for the list of supported MIME
 types on Android and Android Wear.<p></p></a></td>
      </tr>
      <tr>
        <td><code dir="ltr" translate="no">dataUri</code></td>
        <td width="100%">
          <code dir="ltr" translate="no">Uri</code>: The uri containing the content whose type is given by the MIME type.
 <p class="note">
 </p><ol>
   <li>Notification Listeners including the System UI need permission to access the
       data the Uri points to. The recommended ways to do this are:</li>
   <li>Store the data in your own ContentProvider, making sure that other apps have
       the correct permission to access your provider. The preferred mechanism for
       providing access is to use per-URI permissions which are temporary and only
       grant access to the receiving application. An easy way to create a
       ContentProvider like this is to use the FileProvider helper class.</li>
   <li>Use the system MediaStore. The MediaStore is primarily aimed at video, audio
       and image MIME types, however beginning with Android 3.0 (API level 11) it can
       also store non-media types (see MediaStore.Files for more info). Files can be
       inserted into the MediaStore using scanFile() after which a content:// style
       Uri suitable for sharing is passed to the provided onScanCompleted() callback.
       Note that once added to the system MediaStore the content is accessible to any
       app on the device.</li>
 </ol><p></p></td>
      </tr>
    </tbody></table>