<p class="caution"><strong>
      This method was deprecated
      in API level 30.</strong><br/>
    These directories still exist and are scanned, but developers
             are encouraged to migrate to inserting content into a
             <code dir="ltr" translate="no"><a href="/reference/android/provider/MediaStore">MediaStore</a></code> collection directly, as any app can
             contribute new media to <code dir="ltr" translate="no"><a href="/reference/android/provider/MediaStore">MediaStore</a></code> with no
             permissions required, starting in
             <code dir="ltr" translate="no"><a href="/reference/android/os/Build.VERSION_CODES#Q">Build.VERSION_CODES.Q</a></code>.
  </p><ul>
 <li>Shared storage may not always be available, since removable media can
 be ejected by the user. Media state can be checked using
 <code dir="ltr" translate="no"><a href="/reference/android/os/Environment#getExternalStorageState(java.io.File)">Environment#getExternalStorageState(File)</a></code>.
 </li><li>There is no security enforced with these files. For example, any
 application holding
 <code dir="ltr" translate="no"><a href="/reference/android/Manifest.permission#WRITE_EXTERNAL_STORAGE">Manifest.permission.WRITE_EXTERNAL_STORAGE</a></code> can write to
 these files.
 </li></ul><p>
 No additional permissions are required for the calling app to read or
 write files under the returned path. Write access outside of these paths
 on secondary external storage devices is not available.
 </p>