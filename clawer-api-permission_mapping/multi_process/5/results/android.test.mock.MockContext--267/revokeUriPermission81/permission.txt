<p>Remove all permissions to access a particular content provider Uri
 that were previously added with <code dir="ltr" translate="no"><a href="/reference/android/content/Context#grantUriPermission(java.lang.String,%20android.net.Uri,%20int)">grantUriPermission(String, Uri, int)</a></code> or <em>any other</em> mechanism.
 The given Uri will match all previously granted Uris that are the same or a
 sub-path of the given Uri.  That is, revoking "content://foo/target" will
 revoke both "content://foo/target" and "content://foo/target/sub", but not
 "content://foo".  It will not remove any prefix grants that exist at a
 higher level.

 </p><p>Prior to <code dir="ltr" translate="no"><a href="/reference/android/os/Build.VERSION_CODES#LOLLIPOP">Build.VERSION_CODES.LOLLIPOP</a></code>, if you did not have
 regular permission access to a Uri, but had received access to it through
 a specific Uri permission grant, you could not revoke that grant with this
 function and a <code dir="ltr" translate="no"><a href="/reference/java/lang/SecurityException">SecurityException</a></code> would be thrown.  As of
 <code dir="ltr" translate="no"><a href="/reference/android/os/Build.VERSION_CODES#LOLLIPOP">Build.VERSION_CODES.LOLLIPOP</a></code>, this function will not throw a security
 exception, but will remove whatever permission grants to the Uri had been given to the app
 (or none).</p><p>Unlike <code dir="ltr" translate="no"><a href="/reference/android/content/Context#revokeUriPermission(java.lang.String,%20android.net.Uri,%20int)">revokeUriPermission(java.lang.String, android.net.Uri, int)</a></code>, this method impacts all permission
 grants matching the given Uri, for any package they had been granted to, through any
 mechanism this had happened (such as indirectly through the clipboard, activity launch,
 service start, etc).  That means this can be potentially dangerous to use, as it can
 revoke grants that another app could be strongly expecting to stick around.</p>